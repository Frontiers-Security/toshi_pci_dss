{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "TOSHI PCI DSS MICROSERVICES",
    "Parameters" : {
        
        "ToshiVPC" : {
            "Type": "String"
        },
        
        "SubnetCIDR": {		
			"Type": "String",
            "Default" : "10.14.57.0/24"		
		},
        
        "RepositoryName": {		
			"Type": "String"
		},
                
        "InstanceType" : {
            "Description" : "Worker EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro"
        },
        
        "OperatorEMail": {
            "Description": "Email address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },
        
        "MinInstances" : {
            "Description" : "The minimum number of Workers",
            "Type" : "Number",
            "MinValue" : "1",
            "Default"  : "1",
            "ConstraintDescription" : "Enter a number >=1"
        },
        
        "MaxInstances" : {
            "Description" : "The maximum number of Workers",
            "Type" : "Number",
            "MinValue" : "1",
            "Default"  : "1",
            "ConstraintDescription" : "Enter a number >=1"
        },
        
        "KeyName" : {
            "Description" : "The EC2 Key Pair to allow SSH access to the instances",
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "Default"  : "hello_and_wellcome",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        
        "NatGatewayId" : {		
			"Type": "String"		
		},
        
        "BastionVPCPeeringConnection" : {          
            "Type" : "String"
        }
    },
    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "t2.micro"  : { "Arch" : "64HVM" },
            "t2.small"  : { "Arch" : "64HVM" },
            "t2.medium" : { "Arch" : "64HVM" },
            "t2.large"  : { "Arch" : "64HVM" },
            "m3.medium" : { "Arch" : "64HVM" },
            "m4.large"   : { "Arch" : "64HVM" },
            "m4.xlarge"   : { "Arch" : "64HVM" },
            "m4.2xlarge"  : { "Arch" : "64HVM" },
            "m4.4xlarge"  : { "Arch" : "64HVM" },
            "m4.10xlarge" : { "Arch" : "64HVM" }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "64" : "ami-d85e75b0", "64HVM" : "ami-d05e75b8" },
            "us-west-2"      : { "64" : "ami-6989a659", "64HVM" : "ami-5189a661" },
            "us-west-1"      : { "64" : "ami-d16a8b95", "64HVM" : "ami-df6a8b9b" },
            "eu-west-1"      : { "64" : "ami-5da23a2a", "64HVM" : "ami-47a23a30" },
            "eu-central-1"   : { "64" : "ami-b6cff2ab", "64HVM" : "ami-accff2b1" },
            "ap-southeast-1" : { "64" : "ami-e8f1c1ba", "64HVM" : "ami-96f1c1c4" },
            "ap-northeast-1" : { "64" : "ami-936d9d93", "64HVM" : "ami-8d6d9d8d" },
            "ap-southeast-2" : { "64" : "ami-7163104b", "64HVM" : "ami-69631053" },
            "sa-east-1"      : { "64" : "ami-55883348", "64HVM" : "ami-4d883350" }
        }
    },
    "Resources" : {
        
        "PublicSubnet" : {
           "Type" : "AWS::EC2::Subnet",
           "Properties" : {
                "CidrBlock" : {
                    "Ref": "SubnetCIDR"
                },
                "VpcId" : { "Ref" : "ToshiVPC" }
           }
        },
        
        "PublicSubnetRouteTable" : {
           "Type" : "AWS::EC2::RouteTable",
           "Properties" : {
              "VpcId" : { "Ref" : "ToshiVPC" }
           }
        },
        
        "PublicSubnetRouteTableAssociation" : {
           "Type" : "AWS::EC2::SubnetRouteTableAssociation",
           "Properties" : {
              "RouteTableId" : { "Ref" : "PublicSubnetRouteTable" },
              "SubnetId" : { "Ref" : "PublicSubnet" }
           }
        },
        
        
        "RouteToNAT" : {
          "Type" : "AWS::EC2::Route",
          "Properties" : {
            "RouteTableId" : { "Ref" : "PublicSubnetRouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "NatGatewayId" : { "Ref" : "NatGatewayId" }
          }
        },
        
        "RouteToBastion" : {
          "Type" : "AWS::EC2::Route",
          "Properties" : {
            "RouteTableId" : { "Ref" : "PublicSubnetRouteTable" },
            "DestinationCidrBlock" : "172.31.0.0/16",            
            "VpcPeeringConnectionId" : { "Ref" : "BastionVPCPeeringConnection" }
          }
        },
        
        "LoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Listeners" : [ {
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                }],
                "Subnets" : [{
                    "Ref": "PublicSubnet"
                }],
                "HealthCheck" : {
                    "Target" : "TCP:80",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "2",
                    "Interval" : "10",
                    "Timeout" : "5"
                }
            }
        },

        "InstanceUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement":[{
                            "Effect": "Allow",
                            "Action": [
                                "sns:Publish",
                                "sns:GetTopicAttributes",
                                "sns:List*",
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage",
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "InstanceKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : {"Ref": "InstanceUser"}
            }
        },

        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/"
            }
        },

        "InstanceRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "InstanceRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "autoscaling:Describe*",
                            "cloudformation:Describe*",
                            "cloudformation:GetTemplate"
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },

        "CloudWatchPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudWatchRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:Create*",
                                "logs:PutLogEvents",
                                "s3:GetObject"
                            ],
                        "Resource": [
                                "arn:aws:logs:*:*:*",
                                "arn:aws:s3:::*"
                            ]
                    }]
                },
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },

        "InstanceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },

        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "todo Fn::GetAtt ToshiVPC CidrBlock",
                "VpcId" : { "Ref" : "ToshiVPC" },
                "SecurityGroupIngress" : [ {
                    "IpProtocol" : "tcp",
                    "FromPort"   : "22",
                    "ToPort"     : "22",
                    "CidrIp"     : "0.0.0.0/0"
                },
                {
                    "IpProtocol" : "tcp",
                    "FromPort"   : "80",
                    "ToPort"     : "80",
                    "SourceSecurityGroupOwnerId" : { "Fn::GetAtt" : ["LoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
                    "SourceSecurityGroupName"    : { "Fn::GetAtt" : ["LoadBalancer", "SourceSecurityGroup.GroupName"]}
                },
                {
                    "IpProtocol" : "tcp",
                    "FromPort"   : "27017",
                    "ToPort"     : "27017"
                } ]
            }
        },

        "AutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : { "Ref" : "MinInstances" },
                "MaxSize" : { "Ref" : "MaxInstances" },
                "LoadBalancerNames" : [ { "Ref" : "LoadBalancer" } ],
                "NotificationConfigurations" : [{
                    "TopicARN" : { "Ref" : "NotificationTopic" },
                    "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                            "autoscaling:EC2_INSTANCE_TERMINATE",
                                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
                }],
                "VPCZoneIdentifier" : [
                  {
                    "Ref": "PublicSubnet"
                  }
                ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT15M",
                    "Count"   : "1"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime" : "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },

        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "Comment" : "Install a simple application",
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "apt-get" : {
                                "mdadm" : [],
                                "sysstat" : []
                            }
                        },
                        "files" : {

                            "/tmp/cwlogs/applogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file= /var/awslogs/agent-state\n",
                                            "[/home/ubuntu/proapp_api.log]\n",
                                            "file = /home/ubuntu/proapp_api.log\n",
                                            "log_group_name = ", {"Ref": "FrontendLogGroup"}, "\n",
                                            "log_stream_name = {instance_id}/proapp_api.log\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S",
                                            "[/home/ubuntu/proapp_api.error.log]\n",
                                            "file = /home/ubuntu/proapp_api.error.log\n",
                                            "log_group_name = ", {"Ref": "FrontendLogGroup"}, "\n",
                                            "log_stream_name = {instance_id}/proapp_api.error.log\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S",
                                            "[/home/ubuntu/proapp_app.log]\n",
                                            "file = /home/ubuntu/proapp_app.log\n",
                                            "log_group_name = ", {"Ref": "FrontendLogGroup"}, "\n",
                                            "log_stream_nemailame = {instance_id}/proapp_app.log\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S",
                                            "[/home/ubuntu/proapp_app.error.log]\n",
                                            "file = /home/ubuntu/proapp_app.error.log\n",
                                            "log_group_name = ", {"Ref": "FrontendLogGroup"}, "\n",
                                            "log_stream_name = {instance_id}/proapp_app.error.log\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S"
                                        ]
                                    ]
                                }
                            },

                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                            "region=", { "Ref" : "AWS::Region" }, "\n"
                                        ]
                                    ]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "  --stack ", { "Ref" : "AWS::StackName" },
                                            "  --resource LaunchConfig ",
                                            "  --region ", { "Ref" : "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId" : { "Fn::FindInMap" : [
                                  "AWSRegionArch2AMI",
                                  { "Ref" : "AWS::Region" },
                                  { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
                "InstanceType" : { "Ref" : "InstanceType" },
                "UserData"     : { "Fn::Base64" : { "Fn::Join" : ["", [

                    "#!/bin/bash -xe\n",
                    "sudo -s\n",
                    "apt-get update\n",
                    "apt-get -y install python-setuptools\n",
                    "cd /home/ubuntu\n",
                    "mkdir aws-cfn-bootstrap-latest\n",
                    "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                    "sudo easy_install aws-cfn-bootstrap-latest\n",

                    "sudo /usr/local/bin/cfn-init --stack ",
                        { "Ref":"AWS::StackName" },
                        " --resource LaunchConfig",
                        " --region ",
                        { "Ref": "AWS::Region" },
                        "|| echo 'Failed to start cfn-hup 1 '\n",

                    "sudo /usr/local/bin/cfn-hup || echo 'Failed to start cfn-hup'\n",

                    "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

                    "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/applogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",

                    "apt-get install -y ruby2.0\n",

                    "apt-get install -y unzip\n",
                    "curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip\n",
                    "unzip awscli-bundle.zip\n",
                    "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",

                    "cd /home/ubuntu\n",
                    "/usr/local/bin/aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region ", { "Ref" : "AWS::Region" }, " \n", 
                    "chmod +x ./install \n",
                    "./install auto \n",

                    "echo | apt-add-repository ppa:chris-lea/node.js \n", 
                    "wget -qO- https://deb.nodesource.com/setup_5.x | bash - \n",
                    "apt-get install -y nodejs \n",               
                    "npm install -g forever \n",
                   
                    "apt-get install -y git-core \n",

                    "/usr/local/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource AutoScalingGroup ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}},
                "IamInstanceProfile": {
                    "Ref": "InstanceRoleInstanceProfile"
                }
            }
        },

        "FrontendScaleUpPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "1"
            }
        },

        "FrontendScaleDownPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "-1"
            }
        },

        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "600",
                "EvaluationPeriods": "2",
                "Threshold": "90",
                "AlarmActions": [ { "Ref": "FrontendScaleUpPolicy" } ],
                "Dimensions": [
                {
                    "Name": "AutoScalingGroupName",
                    "Value": { "Ref": "AutoScalingGroup" }
                }],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },

        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "70",
                "AlarmActions": [ { "Ref": "FrontendScaleDownPolicy" } ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "AutoScalingGroup" }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },

        "FrontendLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 7
            }
        },

        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
            }
        },
        
        "CodeDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "codedeploy.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                    ]
                },
                "Path": "/"
            }
        },       
              
        "CodeDeployRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CodeDeployRole",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:*",
                            "AutoScaling:*"                            
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                {
                    "Ref": "CodeDeployRole"
                }]
            }
        },
        
        "ProApplication" : {
            "Type" : "AWS::CodeDeploy::Application",
            "Properties" : {
                "ApplicationName" : "ProApplication"
            }
        },

        "DeploymentGroup" : {
            "Type" : "AWS::CodeDeploy::DeploymentGroup",
            "DependsOn" : "AutoScalingGroup",
            "Properties" : {
                "ApplicationName" : {"Ref" : "ProApplication" },
                "AutoScalingGroups" : [ {"Ref" : "AutoScalingGroup" } ],
                "ServiceRoleArn" : { "Fn::GetAtt" : [ "CodeDeployRole" , "Arn" ] }
            }
        },
                
        "CodePipelineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "codepipeline.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                    ]
                },
                "Path": "/"
            }
        },       
        
        "CodePipelineRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CodePipelineRole",
                "PolicyDocument": { 
                    "Statement": [
                        {
                            "Action": [
                                "codepipeline:*",
                                "iam:ListRoles",
                                "iam:PassRole",
                                "s3:*",                               
                                "codecommit:*",             
                                "codedeploy:*",                                
                                "lambda:*",
                                "ec2:*"                                
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"                                                            
                },
                "Roles": [
                {
                    "Ref": "CodePipelineRole"
                }]
            }
        },                
        
        "AppPipeline": {
            "Type": "AWS::CodePipeline::Pipeline",
            "Properties": {
                "RoleArn": {"Fn::GetAtt" : ["CodePipelineRole", "Arn"] },
                "Stages": [
                  {
                    "Name": "Source",

                        "Actions":[
                          {
                            "InputArtifacts":[
            
                            ],
                            "Name":"Source",
                            "ActionTypeId":{
                              "Category":"Source",
                              "Owner":"AWS",
                              "Version":"1",
                              "Provider":"CodeCommit"
                            },
                            "OutputArtifacts":[
                              {
                                "Name":"ProApp"
                              }
                            ],
                            "Configuration":{
                                "BranchName" : "master",
                                "RepositoryName" : {
                                    "Ref": "RepositoryName"
                                }
                            },
                            "RunOrder":1
                          }
                        ]

                  },
                  {
                    "Name": "Beta",
                    "Actions": [
                      {
                        "Name": "BetaAction",
                        "InputArtifacts": [
                          {
                            "Name": "ProApp"
                          }
                        ],
                        "ActionTypeId": {
                          "Category": "Deploy",
                          "Owner": "AWS",
                          "Version": "1",
                          "Provider": "CodeDeploy"
                        },
                        "Configuration": {
                          "ApplicationName": {"Ref" : "ProApplication"},
                          "DeploymentGroupName": {"Ref" : "DeploymentGroup"}
                        },
                        "RunOrder": 1
                      }
                    ]
                  }
                ],
                "ArtifactStore": {
                  "Type": "S3",
                  "Location": "codepipeline-us-east-1-477813698450"
                }
            }
        }          
        
    },

    "Outputs" : {
        "BalancerUrl" : {
            "Description" : "Microservice URL",
            "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
        },
        "AutoscaleName" : {
            "Description" : "Use it in CodeDeploy",
            "Value" : {
                "Ref" : "AutoScalingGroup"
            }
        },
        "CloudWatchLogGroupName": {
            "Description": "The name of the CloudWatch log group",
            "Value": {
                "Ref": "FrontendLogGroup"
            }
        }
    }
}
