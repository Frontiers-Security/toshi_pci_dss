{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Cluster Shard",
    "Parameters" : {
        "InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String"         
        },
        "MongoVolumeSize" : {
            "Type" : "Number",
            "ConstraintDescription" : "GB"
        },
        "KeyName" : {
            "Description" : "Please, generate a key pair first, if you don't have them.",
            "Type" : "AWS::EC2::KeyPair::KeyName"           
        },
        "InstanceSecurityGroup" : {
            "Description" : "InstanceSecurityGroup",
            "Type" : "String"
        },
        "SubnetId" : {
            "Description" : "SubnetId",
            "Type" : "String"
        },
        "ServerId" : {
            "Description" : "ServerId",
            "Type" : "String"
        } 
    },
    "Mappings" : {
        "InstanceLabel2Type" : {
            "t2.micro"  : { "Type" : "t2.micro" },
            "t2.small"  : { "Type" : "t2.small" },
            "t2.medium" : { "Type" : "t2.medium" },
            "t2.large"  : { "Type" : "t2.large" },
            "m3.medium" : { "Type" : "m3.medium" },
            "m4.large"   : { "Type" : "m4.large" },
            "m4.xlarge"   : { "Type" : "m4.xlarge" },
            "m4.2xlarge"  : { "Type" : "m4.2xlarge" },
            "m4.4xlarge"  : { "Type" : "m4.4xlarge" },
            "m4.10xlarge" : { "Type" : "m4.10xlarge" }
        },
        "AWSInstanceType2Arch" : {
            "t2.micro"  : { "Arch" : "64HVM" },
            "t2.small"  : { "Arch" : "64HVM" },
            "t2.medium" : { "Arch" : "64HVM" },
            "t2.large"  : { "Arch" : "64HVM" },
            "m3.medium" : { "Arch" : "64HVM" },
            "m4.large"   : { "Arch" : "64HVM" },
            "m4.xlarge"   : { "Arch" : "64HVM" },
            "m4.2xlarge"  : { "Arch" : "64HVM" },
            "m4.4xlarge"  : { "Arch" : "64HVM" },
            "m4.10xlarge" : { "Arch" : "64HVM" }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "64" : "ami-d85e75b0", "64HVM" : "ami-d05e75b8" },
            "us-west-2"      : { "64" : "ami-6989a659", "64HVM" : "ami-5189a661" },
            "us-west-1"      : { "64" : "ami-d16a8b95", "64HVM" : "ami-df6a8b9b" },
            "eu-west-1"      : { "64" : "ami-5da23a2a", "64HVM" : "ami-47a23a30" },
            "eu-central-1"   : { "64" : "ami-b6cff2ab", "64HVM" : "ami-accff2b1" },
            "ap-southeast-1" : { "64" : "ami-e8f1c1ba", "64HVM" : "ami-96f1c1c4" },
            "ap-northeast-1" : { "64" : "ami-936d9d93", "64HVM" : "ami-8d6d9d8d" },
            "ap-southeast-2" : { "64" : "ami-7163104b", "64HVM" : "ami-69631053" },
            "sa-east-1"      : { "64" : "ami-55883348", "64HVM" : "ami-4d883350" }
        }
    },
    "Resources" : {

        "InstanceUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement":[{
                            "Effect": "Allow",
                            "Action": [
                                "sns:Publish",
                                "sns:GetTopicAttributes",
                                "sns:List*",
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage",
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "InstanceKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : {"Ref": "InstanceUser"}
            }
        },

        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/"
            }
        },

        "InstanceRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "InstanceRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudformation:Describe*",
                            "cloudformation:GetTemplate"
                        ],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },

        "CloudWatchPolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudWatchRole",
                "PolicyDocument": {
                    "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:Create*",
                            "logs:PutLogEvents",
                            "s3:GetObject",
                            "logs:DescribeLogStreams"
                            ],
                        "Resource": [
                                "arn:aws:logs:*:*:*",
                                "arn:aws:s3:::*"
                            ]
                    }]
                },
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },

        "InstanceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                {
                    "Ref": "InstanceRole"
                }]
            }
        },
        
        "ProappServerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 7
            }
        },

        "ShardInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "Comment" : "initialization",
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files" : {
                            "/tmp/cwlogs/applogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file= /var/awslogs/agent-state\n", "\n",
                                            "[proapp_api]\n",
                                            "file = /home/ubuntu/proapp_api.log\n",
                                            "log_group_name = ", {"Ref": "ProappServerLogGroup"}, "\n",
                                            "log_stream_name = proapp_api\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S", "\n", "\n",
                                            "[proapp_api_error]\n",
                                            "file = /home/ubuntu/proapp_api.error.log\n",
                                            "log_group_name = ", {"Ref": "ProappServerLogGroup"}, "\n",
                                            "log_stream_name = proapp_api_error\n",
                                            "datetime_format = %d/%b/%Y:%H:%M:%S", "\n"
                                        ]
                                    ]
                                }
                            },

                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                            "region=", { "Ref" : "AWS::Region" }, "\n"
                                        ]
                                    ]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "  --stack ", { "Ref" : "AWS::StackName" },
                                            "  --resource LaunchConfig ",
                                            "  --region ", { "Ref" : "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            },
                            
                            "/tmp/private.ip" : {
                                "content" : { "Fn::Join" : ["", [
                                    "#!/bin/bash\n\n",
                                    "PRIVATE_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4/`\n",
                                    "mongo --host router1.toshipci.dss:27019 --eval 'sh.addShard(\"$PRIVATE_IP\")' \n"
                                ] ] },
                                "mode"    : "000777",
                                "owner"   : "root",
                                "group"   : "root"                      
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId" : { "Fn::FindInMap" : [
                                  "AWSRegionArch2AMI",
                                  { "Ref" : "AWS::Region" },
                                  { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Fn::FindInMap" : [ "InstanceLabel2Type", { "Ref" : "InstanceType" }, "Type" ] }, "Arch" ] } ] },
                "InstanceType" : { "Fn::FindInMap" : [ "InstanceLabel2Type", { "Ref" : "InstanceType" }, "Type" ] },
                "SubnetId" : { "Ref" : "SubnetId" },
                "SecurityGroupIds": [{ "Ref" : "InstanceSecurityGroup" }],
                "UserData"     : { "Fn::Base64" : { "Fn::Join" : ["", [

                    "#!/bin/bash -xe\n",
                    "sudo -s\n",             
                    "apt-get update \n",
                    "apt-get -y install python-setuptools\n",
                    "cd /home/ubuntu\n",
                    "mkdir aws-cfn-bootstrap-latest\n",
                    "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                    "sudo easy_install aws-cfn-bootstrap-latest\n",

                    "sudo /usr/local/bin/cfn-init --stack ",
                        { "Ref":"AWS::StackName" },
                        " --resource ShardInstance",
                        " --region ",
                        { "Ref": "AWS::Region" },
                        "|| echo 'Failed to start cfn-hup 1 '\n",

                    "sudo /usr/local/bin/cfn-hup || echo 'Failed to start cfn-hup'\n",

                    "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

                    "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/applogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                    "cp /tmp/cwlogs/applogs.conf /var/awslogs/etc/awslogs.conf \n",
                    "sudo service awslogs restart \n",

                    "apt-get -y install mongodb > /tmp/apt-mongo.log 2>&1\n",

                    "service mongodb stop \n",
                    
                    "DEBIAN_FRONTEND=noninteractive apt-get -y install mdadm sysstat lvm2 >> /tmp/apt.log 2>&1\n",
                   
                    "## Waiting for EBS mounts to become available\n",
                    "while [ ! -e /dev/xvdb ]; do echo waiting for /dev/xvdb to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdc ]; do echo waiting for /dev/xvdc to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvde ]; do echo waiting for /dev/xvde to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdf ]; do echo waiting for /dev/xvdf to attach; sleep 10; done\n",
                    "## Create RAID10 and persist configuration\n",
                    "mdadm --verbose --create /dev/md0 --level=10 --chunk=256 --raid-devices=4 /dev/xvdb /dev/xvdc /dev/xvde /dev/xvdf > /tmp/mdadm.log 2>&1\n",
                    "echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n",
                    "## Set read-ahead on each device\n",
                    "blockdev --setra 128 /dev/md0\n",
                    "blockdev --setra 128 /dev/xvdb\n",
                    "blockdev --setra 128 /dev/xvdc\n",
                    "blockdev --setra 128 /dev/xvde\n",
                    "blockdev --setra 128 /dev/xvdf\n",
                    "## Create physical and logical volumes\n",
                    "dd if=/dev/zero of=/dev/md0 bs=512 count=1\n",
                    "pvcreate /dev/md0\n",
                    "vgcreate vg0 /dev/md0\n",
                    "lvcreate -l 90%vg -n data vg0\n",
                    "lvcreate -l 5%vg -n log vg0\n",
                    "lvcreate -l 5%vg -n journal vg0\n",
                    "## Create filesystems and mount point info\n",
                    "mke2fs -t ext4 -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1\n",
                    "mkdir /data\n",
                    "mkdir /log\n",
                    "mkdir /journal\n",
                    "echo '/dev/vg0/data /data ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/log /log ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "mount /data > /tmp/mount1.log 2>&1\n",
                    "mount /log > /tmp/mount2.log 2>&1\n",
                    "mount /journal > /tmp/mount3.log 2>&1\n",
                    "#ln -s /journal /data/journal\n",

                    "chown -R mongodb:mongodb /data > /tmp/chown1.log 2>&1\n",
                    "chown -R mongodb:mongodb /log > /tmp/chown2.log 2>&1\n",
                    "chown -R mongodb:mongodb /journal > /tmp/chown3.log 2>&1\n",
                    "## Stop",
                    
                    "## Update mongod configuration\n",
                    "cat <<EOF > /etc/mongodb.conf\n",
                    "logpath=/log/mongodb.log\n",
                    "logappend=true\n",
                    "fork=true\n",
                    "dbpath=/data\n",
                    "bind_ip = 0.0.0.0\n",
                    "journal=true\n",                   
                    "\n",
                    "EOF\n",
                    
                    "/tmp/private.ip ./",                                        

                    "## Start mongod\n",
                    "service mongodb start > /tmp/mongod-start.log 2>&1\n",

                    "echo '", { "Ref" : "AWS::StackName" }, "' > /tmp/aws_init_name.txt \n",
                    "echo '", { "Ref" : "AWS::Region" }, "' > /tmp/aws_init_region.txt \n", 

                    "## Waiting until mongod has started\n",
                    "sleep 30\n",                                

                    "/usr/local/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource ShardInstance ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"


                ]]}},
                "IamInstanceProfile": {
                    "Ref": "InstanceRoleInstanceProfile"
                },
                "Tags" : [ {
                             "Key" : "Name",
                             "Value" : "mongo_shard"
                           }],
                "BlockDeviceMappings" : [{
                    "DeviceName" : "/dev/sda1",
                    "Ebs" : {
                        "VolumeSize" : "12"
                    }
                }]
            }
        },
        


        "MongoVolume1": {
          "Type": "AWS::EC2::Volume",
          "Properties": {
            "Size": {
              "Ref": "MongoVolumeSize"
            },
            "AvailabilityZone": {
              "Fn::GetAtt": [
                "ShardInstance",
                "AvailabilityZone"
              ]
            }
          }
        },
        "MongoVolume2": {
          "Type": "AWS::EC2::Volume",
          "Properties": {
            "Size": {
              "Ref": "MongoVolumeSize"
            },
            "AvailabilityZone": {
              "Fn::GetAtt": [
                "ShardInstance",
                "AvailabilityZone"
              ]
            }
          }
        },
        "MongoVolume3": {
          "Type": "AWS::EC2::Volume",
          "Properties": {
            "Size": {
              "Ref": "MongoVolumeSize"
            },
            "AvailabilityZone": {
              "Fn::GetAtt": [
                "ShardInstance",
                "AvailabilityZone"
              ]
            }
          }
        },
        "MongoVolume4": {
          "Type": "AWS::EC2::Volume",
          "Properties": {
            "Size": {
              "Ref": "MongoVolumeSize"
            },
            "AvailabilityZone": {
              "Fn::GetAtt": [
                "ShardInstance",
                "AvailabilityZone"
              ]
            }
          }
        },
        "MongoVolumeMount1": {
          "Type": "AWS::EC2::VolumeAttachment",
          "Properties": {
            "InstanceId": {
              "Ref": "ShardInstance"
            },
            "VolumeId": {
              "Ref": "MongoVolume1"
            },
            "Device": "/dev/xvdb"
          }
        },
        "MongoVolumeMount2": {
            "Type": "AWS::EC2::VolumeAttachment",
            "Properties": {
                "InstanceId": {
                    "Ref": "ShardInstance"
                },
                "VolumeId": {
                    "Ref": "MongoVolume2"
                },
                "Device": "/dev/xvdc"
            }
        },
        "MongoVolumeMount3": {
            "Type": "AWS::EC2::VolumeAttachment",
            "Properties": {
                "InstanceId": {
                  "Ref": "ShardInstance"
                },
                "VolumeId": {
                  "Ref": "MongoVolume3"
                },
                "Device": "/dev/xvde"
            }
        },
        "MongoVolumeMount4": {
            "Type": "AWS::EC2::VolumeAttachment",
            "Properties": {
                "InstanceId": {
                    "Ref": "ShardInstance"
                },
                "VolumeId": {
                    "Ref": "MongoVolume4"
                },
                "Device": "/dev/xvdf"
            }
        }



    },

    "Outputs" : {

    }
}
